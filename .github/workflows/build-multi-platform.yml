name: Build Multi-Platform Executables

on:
  push:
    tags:
      - 'v*'      # Trigger on version tags like v1.0.0
      - '[0-9]*'  # Also trigger on tags like 0.1.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            executable: LimTerm.exe
            artifact_name: LimTerm-Windows
          - os: macos-latest
            executable: LimTerm
            artifact_name: LimTerm-macOS
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        $env:PATH += ";$env:APPDATA\Python\Scripts"
        echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Install Poetry (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev
      
    - name: Install root project
      run: poetry install --no-interaction
        
    - name: Build with PyInstaller
      run: poetry run pyinstaller limterm.spec
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.executable }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: LimTerm-Windows
        path: ./artifacts/windows/
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: LimTerm-macOS
        path: ./artifacts/macos/
        
    - name: Rename executables
      run: |
        mv ./artifacts/windows/LimTerm.exe ./LimTerm-Windows.exe
        mv ./artifacts/macos/LimTerm ./LimTerm-macOS
        chmod +x ./LimTerm-macOS
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          LimTerm-Windows.exe
          LimTerm-macOS
        body: |
          ## LimTerm ${{ github.ref_name }}
          
          ðŸš€ **Cross-Platform Release**
          
          ### Download:
          - **`LimTerm-Windows.exe`** - Windows executable
          - **`LimTerm-macOS`** - macOS executable
          - **Source code** - Available as zip/tar.gz below
          
          ### Installation:
          1. Download the appropriate executable for your OS
          2. Run directly - no installation required
          3. First run creates `lim_config/` folder for settings
          
          ### Requirements:
          - **Windows**: Windows 10/11 (64-bit)
          - **macOS**: macOS 11+ (Apple Silicon or Intel), tk@8 (version 9.0 or later not working now)
          - No Python installation needed
          
          For help, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
